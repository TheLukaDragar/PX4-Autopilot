/****************************************************************************
 *
 *   Copyright (C) 2013-2022 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file /Users/carbs/Desktop/PX4-Autopilot/msg/DronecanNodeStatus.msg */


#pragma once


#include <uORB/uORB.h>


#ifndef __cplusplus
#define DRONECAN_NODE_STATUS_HEALTH_OK 0
#define DRONECAN_NODE_STATUS_HEALTH_WARNING 1
#define DRONECAN_NODE_STATUS_HEALTH_ERROR 2
#define DRONECAN_NODE_STATUS_HEALTH_CRITICAL 3
#define DRONECAN_NODE_STATUS_MODE_OPERATIONAL 0
#define DRONECAN_NODE_STATUS_MODE_INITIALIZATION 1
#define DRONECAN_NODE_STATUS_MODE_MAINTENANCE 2
#define DRONECAN_NODE_STATUS_MODE_SOFTWARE_UPDATE 3
#define DRONECAN_NODE_STATUS_MODE_OFFLINE 7

#endif


#ifdef __cplusplus
struct __EXPORT dronecan_node_status_s {
#else
struct dronecan_node_status_s {
#endif
	uint64_t timestamp;
	uint32_t uptime_sec;
	uint16_t node_id;
	uint16_t vendor_specific_status_code;
	uint8_t health;
	uint8_t mode;
	uint8_t sub_mode;
	uint8_t _padding0[5]; // required for logger


#ifdef __cplusplus
	static constexpr uint8_t HEALTH_OK = 0;
	static constexpr uint8_t HEALTH_WARNING = 1;
	static constexpr uint8_t HEALTH_ERROR = 2;
	static constexpr uint8_t HEALTH_CRITICAL = 3;
	static constexpr uint8_t MODE_OPERATIONAL = 0;
	static constexpr uint8_t MODE_INITIALIZATION = 1;
	static constexpr uint8_t MODE_MAINTENANCE = 2;
	static constexpr uint8_t MODE_SOFTWARE_UPDATE = 3;
	static constexpr uint8_t MODE_OFFLINE = 7;

#endif
};

#ifdef __cplusplus
namespace px4 {
	namespace msg {
		using DronecanNodeStatus = dronecan_node_status_s;
	} // namespace msg
} // namespace px4
#endif

/* register this as object request broker structure */
ORB_DECLARE(dronecan_node_status);


#ifdef __cplusplus
void print_message(const orb_metadata *meta, const dronecan_node_status_s& message);
#endif
